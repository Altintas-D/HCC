tcga_data_primary_tumor <- readRDS("~/Library/Mobile Documents/com~apple~CloudDocs/Lab files/IBG/Phe Project/TCGA_HCC_RNASEQ_LOWPAHvsHIGHPAH/tcga_data_primary_tumor.RDS")

#tcga_data_primary_tumor <- readRDS('/media/psf/iCloud/Lab files/IBG/Phe Project/TCGA_HCC_RNASEQ_LOWMETvsHIGHMET/tcga_data_primary_tumor.RDS') 			######LINUX #############

#if (!requireNamespace("BiocManager", quietly = TRUE))
#    install.packages("BiocManager")

#BiocManager::install(c("edgeR", "DESeq2", "limma", "pheatmap"))
#install.packages(c("RColorBrewer", "tidyverse", "annotables"), dependencies=T)

library(edgeR)
library(DESeq2)
library(RColorBrewer)
library(pheatmap)
library(tidyverse)
#library(limma)
library(annotables)
library(viridis)
#RNAseq Count distribution

raw_counts <- as.data.frame(tcga_data_primary_tumor@assays@data@listData[["HTSeq - Counts"]])


colnames(raw_counts) <- tcga_data_primary_tumor@colData@rownames
rownames(raw_counts) <- tcga_data_primary_tumor@rowRanges@ranges@NAMES


ggplot(raw_counts) + geom_histogram(aes(raw_counts[,1]), stat='bin', bins=200) + xlab("Raw expression counts") + ylab("Number of genes") + theme_classic()


### Create metadata
### MET LOW vs MET HIGH

### Making group as MET high and low

dge <- DGEList(counts=assay(tcga_data_primary_tumor),
				samples=colData(tcga_data_primary_tumor),
				genes=as.data.frame(rowData(tcga_data_primary_tumor)))	
				
dge <- calcNormFactors(dge, method="TMM")

#### Unload edgeR and limma ####################

detach_package <- function(pkg, character.only = FALSE)
{
  if(!character.only)
  {
    pkg <- deparse(substitute(pkg))
  }
  search_item <- paste("package", pkg, sep = ":")
  while(search_item %in% search())
  {
    detach(search_item, unload = TRUE, character.only = TRUE)
  }
}




#######################################################


				
#cpm <- cpm(dge)
#lcpm <- cpm(dge, log=TRUE)

d_mat <- as.matrix(t(dge[["counts"]]))		

gene_id <- "ENSG00000105976"

# Expression value for MET and median level
gene_value <- d_mat[rownames(d_mat), gene_id]
median_value <- median(gene_value)
print(median_value)	

# 28037
dge[["samples"]][["MET"]] <-  ifelse(gene_value>=median_value, "HIGH", "LOW")


dge[["samples"]][["MET2"]] <-  d_mat[rownames(d_mat), gene_id]

MET <- dge[["samples"]][["MET"]]
MET2 <- scale(dge[["samples"]][["MET2"]])

MET2 <- data.frame(MET2)
MET2$tertiles <- NA
MET2 <- MET2 %>%
  mutate(tertiles = ntile(MET2, 3)) %>%
  mutate(tertiles = if_else(tertiles == 1, 'Low', if_else(tertiles == 2, 'Medium', 'High'))) 
  
  MET2$quantiles <- NA
  MET2 <- MET2 %>%
    mutate(quantiles = ntile(MET2, 5)) %>%
    mutate(quantiles = if_else(quantiles == 1, 'Very_low', if_else(quantiles == 2, 'Low',
		 												if_else(quantiles == 3, 'Medium',
														if_else(quantiles == 4, 'High', 'Very_high')
														))))   

Tumor_grade <- dge[["samples"]][["ajcc_pathologic_stage"]]

metadata <- data.frame(MET, MET2, Tumor_grade) 
rownames(metadata) <- tcga_data_primary_tumor@colData@listData[["barcode"]]
metadata$Tumor_grade <- gsub("A|B|C", "", x=metadata$Tumor_grade)
### Check
all(rownames(metadata) == colnames(raw_counts))

# [1] TRUE
# Otherwise, idx <- match(colnames(raw_counts), rownames(metadata))
# reordered_metadata <- metadata[idx,]

#Create DESeq2 Object
dds_raw <- DESeqDataSetFromMatrix(countData = raw_counts,
								colData=metadata,
								design=~MET2) #+ Tumor_grade + Tumor_grade:MET)

################################ NORMALIZATION ######################################
dds_raw <- estimateSizeFactors(dds_raw)
dds_raw <- estimateDispersions(dds_raw)
dds_raw <- nbinomWaldTest(dds_raw)


normalized_counts <- counts(dds_raw, normalized = T)

##################### Unsupervised Clustering analysis ##########################
# Variant stabilizing transformation, log transformation

vsd <- vst(dds_raw, blind=T)
#extract matrix
vsd_mat <- assay(vsd)
# pairwise correlation values
vsd_cor <- cor(vsd_mat)


###############

metadata$tertiles <- as.factor(metadata$tertiles)	
library(forcats)
metadata$tertiles <- fct_relevel(metadata$tertiles, c("High", "Medium", "Low"))
metadata$quantiles <- fct_relevel(metadata$quantiles, c("Very_high", "High", "Medium", "Low", "Very_low"))


Tumor_grade  <- viridis(n=4, direction = -1)
tertiles <- viridis(n=3, option="C")
quantiles <- viridis(n=5, option="C")
MET2 <- viridis(n=nrow(metadata), option="C", direction = -1)

names(Tumor_grade) <- levels(as.factor(metadata$Tumor_grade))
names(tertiles) <- levels(as.factor(metadata$tertiles))
names(quantiles) <- levels(as.factor(metadata$quantiles))
names(MET2) <- as.character(levels(as.factor(metadata$MET2)))

anno_colors <- list(Tumor_grade = Tumor_grade,
	tertiles = tertiles,
	quantiles = quantiles,
	MET2=MET2)



################



#p1 <- pheatmap(vsd_cor, annotation = select(metadata, tertiles, Tumor_grade), show_rownames =  F, show_colnames = F, annotation_colors=anno_colors)

detach_package("edgeR", TRUE)
detach_package("limma", TRUE)


pdf("/Users/dogusaltintas/Library/Mobile Documents/com~apple~CloudDocs/Lab files/IBG/Phe Project/TCGA_HCC_RNASEQ_LOWPAHvsHIGHPAH/DESEQ2_Continuous_MET_Varible_TCGA2.pdf", paper="a4")

vsd %>% 
        assay() %>%
        cor() %>%
        pheatmap(annotation =  select(metadata, c("Tumor_grade", "MET2", "tertiles")), show_rownames =  F, show_colnames = F, 
		 annotation_colors=anno_colors, main="Correlation Heatmap after normalization")

#par(mfrow=c(1,1))
		
 plotPCA(vsd, intgroup="tertiles")

 



library(factoextra)
table <- na.omit(vsd@assays@data@listData[[1]])
table <- t(table)
res.pca <- prcomp(table, scale = F)

 fviz_eig(res.pca)


groups <- as.factor(dds_raw@colData@listData[["quantiles"]])
groups <- fct_relevel(groups, c("Very_high", "High", "Medium", "Low", "Very_low"))


 fviz_pca_ind(res.pca,
             habillage = groups,
             label="none",
             palette =viridis(n=length(levels(groups)), option="C", direction=-1),
             addEllipses = T, # Ellipse de concentration,
             ellipse.level=0.75,
             legend.title = "Groups",
             repel = TRUE)


# RUN IT 

dds <- DESeq(dds_raw)

plotDispEsts(dds)

#Results 
# Continuous variable, logFc follows the MET increase: counts proportional to 2^(LogFc * MET) 

res <- results(dds,
			#contrast= c("MET", "LOW", "HIGH"),
			alpha=.05,
			lfcThreshold = .32
			)

summary(res)

			#out of 53581 with nonzero total read count
			#adjusted p-value < 0.05
			#LFC > 0.32 (up)    : 727, 1.4%
			#LFC < -0.32 (down) : 2149, 4%
			#outliers [1]       : 0, 0%
			#low counts [2]     : 19679, 37%
			#(mean count < 0)
			#[1] see 'cooksCutoff' argument of ?results
			#[2] see 'independentFiltering' argument of ?results
			


#Note the large log2 foldchanges, particularly for genes with lower mean count values. These fold changes are unlikely to be as accurate for genes that have little information associated with them, such as genes with low numbers of counts or high dispersion values. To improve the estimated fold changes we can use log2 foldchange shrinkage. For genes with low amounts of information available, shrinkage uses information from all genes to generate more likely, lower, log2 fold change estimates, similar to what we did with dispersions. DESeq2 has the lfcShrink() function to generate the shrunken log2 foldchanges. We need to specify the DESeq2 object, the contrast, and our results object. We can then create the MA plot again. shrinking the log2 foldchanges will not affect the number of differentially expressed genes returned, only the log2 fold change values.	

res2 <- lfcShrink(dds,
			contrast= c("MET", "LOW", "HIGH"),
			res=res, type="ashr"
			)		

			plotMA(res, ylim=c(-4,4),
			alpha=.05,
			  main = "MA Plot before shrinkage",
			  xlab = "mean of normalized counts",
			  colNonSig = "gray60",
			  colSig = "red",
			  colLine = "grey40",
			  returnData = FALSE,
			  MLE = FALSE
			)
			
			
			plotMA(res2, ylim=c(-4,4),
			alpha=.05,
			  main = "MA Plot after shrinkage",
			  xlab = "mean of normalized counts",
			  colNonSig = "gray60",
			  colSig = "red",
			  colLine = "grey40",
			  returnData = FALSE,
			  MLE = FALSE
			)

res_all <- as.data.frame(res2) 
res_all <- rownames_to_column(res_all, var='ensgene') 
res_all <- merge(res_all, grch38, by="ensgene")
			
# Select significant genese with padj < 0.05


res_sig <- subset(res_all, padj < 0.05) %>%
  				data.frame() %>%
  				rownames_to_column(var = "geneID")
				
res_sig <- res_sig %>%
	arrange(padj)

res_sig <- res_sig[!duplicated(res_sig$ensgene),] 


#### Data Visualisation ##################

sign_norm_counts <- normalized_counts[res_sig$ensgene,]
heat_colors <- brewer.pal(9, "YlOrRd")

genes <- data.frame(res_sig$biotype, res_sig$chr)
rownames(genes) <- res_sig$ensgene
colnames(genes) <- c("biotype", "chromosome")
genes$biotype <- as.factor(genes$biotype)
genes$biotype <- gsub(".*pseudogene", "pseudogene", genes$biotype)
genes$biotype <- gsub("IG_C_gene|IG_J_gene|IG_V_gene|TEC|TR_C_gene|TR_V_gene", "others", genes$biotype)
genes$biotype <- as.factor(genes$biotype)

metadata$tertiles <- as.factor(metadata$tertiles)	
library(forcats)
metadata$tertiles <- fct_relevel(metadata$tertiles, c("High", "Medium", "Low"))
metadata$quantiles <- fct_relevel(metadata$quantiles, c("Very_high", "High", "Medium", "Low", "Very_low"))

breaksList = seq(-1, 1, by = .1)

Tumor_grade  <- viridis(n=4, direction = -1)
tertiles <- viridis(n=3, option="C")
biotype <- rainbow(n=16)
quantiles <- viridis(n=5, option="C")

names(Tumor_grade) <- levels(as.factor(metadata$Tumor_grade))
names(tertiles) <- levels(as.factor(metadata$tertiles))
names(quantiles) <- levels(as.factor(metadata$quantiles))
names(biotype) <- levels(as.factor(genes$biotype))

anno_colors <- list(Tumor_grade = Tumor_grade,
	tertiles = tertiles,
	quantiles = quantiles,
	biotype=biotype)

#names(anno_colors[["Var1"]]) <- levels(as.factor(metadata$Tumor_grade))
#names(anno_colors[["Var2"]]) <- levels(as.factor(metadata$tertiles))
#names(anno_colors[["Var3"]]) <- levels(as.factor(genes$biotype))

anno_colors[["biotype"]][["others"]] <- "black"
anno_colors[["biotype"]][["processed_transcript"]] <-"darkgray"
anno_colors[["biotype"]][["pseudogene"]] <- "white"
anno_colors[["biotype"]][["pseudogene"]] <- "#73D055FF"

pheatmap(sign_norm_counts,
         color= colorRampPalette(c("navy", "white", "red"))(length(breaksList)),
         cluster_rows = T,
         show_rownames=F,
         show_colnames=F,
         annotation_col = select(metadata, tertiles, Tumor_grade, quantiles),
         annotation_row = select(genes, biotype),
         scale = "row",
		 breaks = breaksList, 
		 annotation_colors = anno_colors,
		 main="Heatmap of DEG"
		 )
		 
res_all <- res_all[!duplicated(res_all$ensgene),]		 
res_all <- res_all %>%
	mutate(threshold = padj < .05 & abs(log2FoldChange)>1)
	

######## VOLCANO PLOT ##########

ggplot(res_all) +
	geom_point(aes(x=log2FoldChange, y=-log10(padj), col = threshold)) +
	xlab("log2 fold change") + ylab("-log10 adjusted p-value") +
	theme(legend.position="none", plot.title = element_text(size=rel(1.5), hjust = .5),
	axis.title = element_text(size = rel(1.25))) + theme_classic() +
	geom_vline(xintercept=-1, linetype="dashed") + 
	geom_vline(xintercept=1, linetype="dashed") +
	geom_hline(yintercept=-log10(.05), linetype="dashed") +
	scale_color_manual(values=c("black", "red"))

	##### Alternative
	
library(EnhancedVolcano)
EnhancedVolcano(res,
                lab = rownames(res),
                x = 'log2FoldChange',
                y = 'pvalue')	
	
top_20 <- data.frame(res_sig)[1:20,]
data <- data.frame(sign_norm_counts) %>%
	rownames_to_column(var="ensgene")
	
data <- merge(top_20, data, by="ensgene")
data2 <- data[,-c(1:8,10:15)]	
data3 <- pivot_longer(data2, names_to="samplename", values_to="normalized_counts", -symbol)
data3$samplename <- gsub("[.]", "-", data3$samplename)
top_20 <- inner_join(data3,
	rownames_to_column(metadata, var="samplename"),
	by="samplename"
	)

top_20$tertile <- as.factor(top_20$tertiles)	
library(forcats)
top_20$tertile <- fct_relevel(top_20$tertile, c("High", "Medium", "Low"))

ggplot(top_20) +
    geom_boxplot(aes(x=symbol, y=normalized_counts, fill=tertile, color=tertile), alpha=.7) +
    scale_y_log10() +
    xlab("Genes") +
    ylab("Normalized Counts") +
    ggtitle("Top 20 Significant DE Genes_MET Tertiles") +
    theme_classic() +
    theme(axis.text.x=element_text(angle=45, hjust=1, face="bold")) +
    theme(plot.title=element_text(hjust=.5, size = rel(1.5), face="bold")) +
    theme(axis.text.y=element_text(hjust=1, face="bold")) +
    scale_fill_manual(values=viridis(3, direction=-1, option="D")) +
    scale_color_manual(values=viridis(3, direction=-1, option="D"))
	
	ggplot(top_20) +
	    geom_boxplot(aes(x=symbol, y=normalized_counts, fill=quantiles, color=quantiles), alpha=.7) +
	    scale_y_log10() +
	    xlab("Genes") +
	    ylab("Normalized Counts") +
	    ggtitle("Top 20 Significant DE Genes_MET Quantiles") +
	    theme_classic() +
	    theme(axis.text.x=element_text(angle=45, hjust=1, face="bold")) +
	    theme(plot.title=element_text(hjust=.5, size = rel(1.5), face="bold")) +
	    theme(axis.text.y=element_text(hjust=1, face="bold")) +
	    scale_fill_manual(values=viridis(5, direction=-1, option="D")) +
	    scale_color_manual(values=viridis(5, direction=-1, option="D"))	


		########## Pathways
		
library(clusterProfiler)	

search_kegg_organism('hsa', by='kegg_code')

sigGenes <- res_sig$entrez	

#kegg_res <- data.frame(kk@result[["Description"]], kk@result[["ID"]], kk@result[["p.adjust"]], kk@result[["GeneRatio"]], kk@result[["qvalue"]], kk@result[["Count"]])

#colnames(kegg_res) <-c("Description", "ID", "p.adjust", "GeneRatio", "qvalue", "Count")

#logFC <- res_sig$log2FoldChange
#names(logFC) <- res_sig$entrez		

#pathview(gene.data = logFC, 
 #        pathway.id = "hsa04066", 
  #       species = "hsa", 
   #      limit = list(gene=2, cpd=1))

library("goseq")
library("geneLenDataBase")
library("org.Hs.eg.db")
library(limma)


library(fgsea)
gseaDat <- filter(res_all, !is.na(entrez))
ranks <- gseaDat$log2FoldChange
names(ranks) <- gseaDat$entrez


#Ploting ranked foldchange
barplot(sort(ranks, decreasing = T))

### Pathways
load("/Users/dogusaltintas/Library/Mobile Documents/com~apple~CloudDocs/Lab files/IBG/Papers/Bioinfo_Paper_Sorafenib/human_H_v5p2.rdata")

pathwaysH <- Hs.H

fgseaRes <- fgsea(pathwaysH, ranks, minSize=15, maxSize = 500, eps=0, nPermSimple = 10000 )

			 plot.new()
			 
		 
			 
topUp <- fgseaRes %>% 
    filter(ES > 0) %>% 
    top_n(10, wt=-padj)
topDown <- fgseaRes %>% 
    filter(ES < 0) %>% 
    top_n(10, wt=-padj)
topPathways <- bind_rows(topUp, topDown) %>% 
    arrange(-ES)
plotGseaTable(pathwaysH[topPathways$pathway], 
              ranks, 
              fgseaRes, 
              gseaParam = 0.5)


path <- fgseaRes[fgseaRes$padj<.05,]
path <- path[order(NES),]
path$pathway <- factor(path$pathway, levels=path$pathway)
			  
ggplot(data=path, aes( x=NES, 
			                 y=pathway, 
			                 fill=NES)) +
			          geom_bar(stat='identity') + 
					  theme_classic() +
			          scale_fill_viridis_c() +
			          labs(x="Enrichment Score", y="Pathways") +
					  ggtitle("Pathways enriched with increasing MET")	

emt <- fgseaRes$leadingEdge
emt <- emt[[14]]

xeno <- fgseaRes$leadingEdge
xeno <- xeno[[50]]

fatty <- fgseaRes$leadingEdge
fatty <- fatty[[17]]

ox <- fgseaRes$leadingEdge
ox <- ox[[36]]

glyco <- fgseaRes$leadingEdge
glyco <- glyco[[19]]

g2m <- fgseaRes$leadingEdge[[18]]

barcodeplot(ranks, fatty, glyco, labels=c("MET Low","MET High"), main="Fatty acid metabolism - RED - and Glycolsis - BLUE -")
barcodeplot(ranks, emt, labels=c("MET Low","MET High"), main="EMT-related genes")


########################### AS EXEMPLE RETRIEVE EMT GENES AND PLOT ##############################
### EntrezIDs <- EMT so let's look at res_all

fgseaRes <- fgseaRes[order(fgseaRes$padj),]
fgseaRes$pathway <- factor(fgseaRes$pathway, levels=fgseaRes$pathway)


for(i in 1:length(fgseaRes)){
	if(fgseaRes$padj[i]<=.05){
		data <-  fgseaRes$leadingEdge[[i]]
		data <- t(data)
		data <- data.frame(entrez=t(data), emt=t(data))
		data <- merge(data, res_all, by="entrez")
		
		data <- data[order(data$log2FoldChange),]
		data$symbol <- factor(data$symbol, levels=data$symbol)
		data$signif <- ifelse(data$padj < .05, "Significant", "ns")
				
					if(fgseaRes$NES[[i]]<0){
					
						p <- ggplot(data[c(1:30),], aes_string(x="log2FoldChange", y="symbol", fill="signif")) +
		     geom_bar(stat="identity") + theme_classic() + scale_fill_manual(values=c("black", "red")) +
			 labs(fill="Adjusted P-Value") + ggtitle(paste(fgseaRes$pathway[[i]],  "(High MET vs Low MET)"))	
						print(p)
					} else{
						p <- ggplot(tail(data, n=30), aes_string(x="log2FoldChange", y="symbol", fill="signif")) +
		     geom_bar(stat="identity") + theme_classic() + scale_fill_manual(values=c("black", "red")) +
			 labs(fill="Adjusted P-Value") + ggtitle(paste(fgseaRes$pathway[[i]],  "(High MET vs Low MET)"))	
						print(p)
					}
				
				}
				 else{break}
}


			 
		  

					  plot.new()

isSigGene <- res_all$padj < 0.01 & !is.na(res_all$padj)
					  genes <- as.integer(isSigGene)
					  names(genes) <- res_all$ensgene
					  
pwf <- nullp(genes, "hg19", "ensGene")

goResults <- goseq(pwf, "hg19","ensGene", test.cats=c("GO:BP"))		

#goResults %>% 
#    top_n(20, wt=-over_represented_pvalue) %>% 
#    mutate(hitsPerc=numDEInCat*100/numInCat) %>% 
#    ggplot(aes(x=hitsPerc, 
#               y=term, 
#               colour=over_represented_pvalue, 
#               size=numDEInCat)) +
#       geom_point() +
#		scale_color_viridis_c() +
 #       expand_limits(x=0) +
  #      labs(x="Hits (%)", y="GO term", colour="p value", size="Count")	
		
		

		
		
library ( msigdbr )
# get KEGG 
m_df = msigdbr(species = "Homo sapiens", category = "C2", subcategory = "CP:KEGG")
# make it look like the format used for kegga 
m_df = data.frame(m_df, stringsAsFactors = F)	


####### BE SURE OF ENTREZ IN YOUR DB
library(biomaRt)

mart <- biomaRt::useMart(biomart = "ENSEMBL_MART_ENSEMBL",
                         dataset = "hsapiens_gene_ensembl",
                         host = "http://www.ensembl.org")
						 

genes <- getBM(filters = "ensembl_gene_id",
               attributes = c("ensembl_gene_id","entrezgene_id"),
               values = res_all$ensgene, 
               mart = mart)						 

res_all <- as.data.frame(res2) 
res_all <- rownames_to_column(res_all, var='ensgene') 
res_all <- merge(res_all, grch38, by="ensgene")



colnames(genes) <- c("ensgene", "Entrez")
kegg_all <- merge(genes, res_all, by="ensgene")




entrez.hallmark = m_df[ , c("gs_name","entrez_gene") ]
colnames ( entrez.hallmark ) = c("PathwayID", "GeneID")
kegg_db = entrez.hallmark[ ,c("GeneID", "PathwayID") ]
up <- kegg_all[kegg_all$log2FoldChange>0.32 & kegg_all$padj<.05,]
up <- up$Entrez
down <- kegg_all[kegg_all$log2FoldChange<-0.32 & kegg_all$padj<.05,]	
down <- down$Entrez		
universe <- kegg_all$Entrez	  


k = kegga(list(Up=up, Down=down),
					species="Hs",
                  universe=universe, FDR= .05 )

k_signif <- k[k$P.Up < .05 | k$P.Down < .05,]
k_signif$interpretation <- ifelse(k_signif$P.Up < .05 & k_signif$P.Down > .05 , "Pathway downregulated with low MET", 
									ifelse(k_signif$P.Up < .05 & k_signif$P.Down < .05 & k_signif$P.Up/k_signif$P.Down > 1/1000 & 									k_signif$P.Up/k_signif$P.Down < 1000, "Pathway significant in both condition", 
									ifelse(k_signif$P.Up < .05 & k_signif$P.Down < .05 & k_signif$P.Up/k_signif$P.Down < 1/1000, 									"Pathway downregulated with low MET", 
									ifelse(k_signif$P.Up < .05 & k_signif$P.Down < .05 & k_signif$P.Up/k_signif$P.Down > 									1000, "Pathway upregulated with low MET",
									"Pathway upregulated with low MET")
									)))


k_signif_up <- k_signif[k_signif$interpretation=="Pathway upregulated with low MET",]									
k_signif_up <- k_signif_up[order(k_signif_up$P.Down),]
k_signif_up$Pathway <- factor(k_signif_up$Pathway, levels=k_signif_up$Pathway)
				  

 ggplot(data=k_signif_up[c(1:30),], aes( x=-log10(P.Down), 
												                 y=Pathway, fill=-log10(P.Down)
												                 )) +
												          geom_bar(stat='identity') + 
														  theme_classic() +
												          scale_fill_viridis_c(direction=-1, guide=FALSE, option="B") +
												          labs(x="-log10(PValue)", y="KEGG Pathways") +
														  ggtitle("KEGG Pathways Up with Low MET")	
														  

k_signif_down <- k_signif[k_signif$interpretation=="Pathway downregulated with low MET",]									
k_signif_down <- k_signif_down[order(k_signif_down$P.Down),]
k_signif_down$Pathway <- factor(k_signif_down$Pathway, levels=k_signif_down$Pathway)
				  

 ggplot(data=k_signif_down[c(1:30),], aes( x=-log10(P.Down), 
												                 y=Pathway, fill=-log10(P.Down)
												                 )) +
												          geom_bar(stat='identity') + 
														  theme_classic() +
												          scale_fill_viridis_c(direction=-1, guide=FALSE, option="D") +
												          labs(x="-log10(PValue)", y="KEGG Pathways") +
														  ggtitle("KEGG Pathways Down with Low MET")															  	

k_signif <- k_signif[order(k_signif$P.Down),]
k_signif$Pathway <- factor(k_signif$Pathway, levels=k_signif$Pathway)
				  

 ggplot(data=k_signif[c(1:20, 103:122),], aes( x=-log10(P.Down), 
												                 y=Pathway, 
												                 fill=interpretation)) +
												          geom_bar(stat='identity') + 
														  theme_classic() +
												          scale_fill_manual(values=viridis(n=3, option="B")) +
												          labs(x="-log10(PValue)", y="Pathways") +
														  ggtitle("KEGG") +  theme(legend.position="bottom")		
														  
k_signif <- k_signif[order(k_signif$P.Up),]
k_signif$Pathway <- factor(k_signif$Pathway, levels=k_signif$Pathway)
				  

 ggplot(data=k_signif[c(1:20, 103:122),], aes( x=-log10(P.Up), 
												                 y=Pathway, 
												                 fill=interpretation)) +
												          geom_bar(stat='identity') + 
														  theme_classic() +
												          scale_fill_manual(values=viridis(n=3)) +
												          labs(x="-log10(PValue)", y="Pathways") +
														ggtitle("KEGG")	+theme(legend.position="bottom")															  


go= goana(list(Up=up, Down=down),
                  species="Hs",
                  universe=universe, FDR= .05)
			

go_signif <- go[go$Ont == "BP" & go$P.Up < .05 | go$Ont == "BP" & go$P.Down < .05 ,]
go_signif$interpretation <- ifelse(go_signif$P.Up < .05 & go_signif$P.Down > .05 , "Pathway downregulated with low MET", 
									ifelse(go_signif$P.Up < .05 & go_signif$P.Down < .05 & go_signif$P.Up/go_signif$P.Down > 1/1000 & 									go_signif$P.Up/go_signif$P.Down < 1000, "Pathway significant in both condition", 
									ifelse(go_signif$P.Up < .05 & go_signif$P.Down < .05 & go_signif$P.Up/go_signif$P.Down < 1/1000, 									"Pathway downregulated with low MET", 
									ifelse(go_signif$P.Up < .05 & go_signif$P.Down < .05 & go_signif$P.Up/go_signif$P.Down > 									1000, "Pathway upregulated with low MET",
									"Pathway upregulated with low MET")
									)))
									
go_signif_up <- go_signif[go_signif$interpretation=="Pathway upregulated with low MET",]									
go_signif_up <- go_signif_up[order(go_signif_up$P.Down),]
go_signif_up$Term <- factor(go_signif_up$Term, levels=go_signif_up$Term)
				  

 ggplot(data=go_signif_up[c(1:30),], aes( x=-log10(P.Down), 
												                 y=Term, fill=-log10(P.Down)
												                 )) +
												          geom_bar(stat='identity') + 
														  theme_classic() +
												          scale_fill_viridis_c(direction=-1, guide=FALSE, option="B") +
												          labs(x="-log10(PValue)", y="GO Terms") +
														  ggtitle("BP Up with Low MET")		

go_signif_down <- go_signif[go_signif$interpretation=="Pathway downregulated with low MET",]															  
go_signif_down <- go_signif_down[order(go_signif_down$P.Up),]
go_signif_down$Term <- factor(go_signif_down$Term, levels=go_signif_down$Term)
				  

 ggplot(data=go_signif_down[c(1:30),], aes( x=-log10(P.Up), 
												                 y=Term,
																 , fill=-log10(P.Up))) +
												          geom_bar(stat='identity') + 
														  theme_classic() +
												          scale_fill_viridis_c(direction=-1, guide=FALSE) +
												          labs(x="-log10(PValue)", y="GO Terms") +
														ggtitle("BP Down with Low MET")																  
									
	dev.off()			  				  

	q("no")
